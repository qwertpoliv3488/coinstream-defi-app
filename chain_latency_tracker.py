"""
Chain Latency Tracker ‚Äî –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –≤ —Å–µ—Ç–∏ Bitcoin.
"""

import requests
import time

API = "https://blockstream.info/api/blocks"
BLOCK_COUNT = 10

def fetch_recent_blocks(n=BLOCK_COUNT):
    r = requests.get(API)
    r.raise_for_status()
    return r.json()[:n]

def analyze_delays(blocks):
    delays = []
    print(f"
‚õìÔ∏è Chain Latency Tracker: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(blocks)} –±–ª–æ–∫–æ–≤
")
    for i in range(1, len(blocks)):
        t1 = blocks[i-1]["timestamp"]
        t2 = blocks[i]["timestamp"]
        delta = t1 - t2
        delays.append(delta)
        print(f"–ë–ª–æ–∫ {blocks[i-1]['height']} ‚Üí {blocks[i]['height']}: –∑–∞–¥–µ—Ä–∂–∫–∞ {delta} —Å–µ–∫")
        if delta > 900:
            print("‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ —Å–µ—Ç–∏!")
    avg = sum(delays) / len(delays)
    print(f"
üìä –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {avg:.1f} —Å–µ–∫")

def main():
    try:
        blocks = fetch_recent_blocks()
        analyze_delays(blocks)
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)

if __name__ == "__main__":
    main()
